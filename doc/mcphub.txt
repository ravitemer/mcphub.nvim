*mcphub.txt*  MCP Hub integration for Neovim

Author:   Ravitemer
Homepage: https://github.com/ravitemer/mcphub.nvim
License:  MIT

==============================================================================
CONTENTS                                                    *mcphub-contents*

    Introduction ................ |mcphub-introduction|
    Requirements ................ |mcphub-requirements|
    Installation ................ |mcphub-installation|
    Usage ...................... |mcphub-usage|
    Extensions ................. |mcphub-extensions|
    Troubleshooting ............ |mcphub-troubleshooting|
    Architecture ............... |mcphub-architecture|

==============================================================================
INTRODUCTION                                               *mcphub-introduction*

MCPHub.nvim integrates MCP (Model Context Protocol) servers into your workflow.
Configure and manage MCP servers through a centralized config file while providing
an intuitive UI for browsing, installing and testing tools and resources. Perfect 
for LLM integration, offering both programmatic API access and interactive testing
capabilities.

Features:~
- Simple single-command interface (|:MCPHub|)
- Integrated Hub view for managing servers and tools
  - Dynamically enable/disable servers and tools to optimize token usage
  - Start/stop servers with persistent state
  - Enable/disable specific tools per server
  - State persists across restarts
- Marketplace Integration
  - Browse available MCP servers with details and stats
  - Sort, filter by category, and search servers
  - View server documentation and installation guides
  - One-click installation via Avante/CodeCompanion
- Interactive Testing
  - Real-time tool testing interface
  - Resource browsing and access
  - Built-in documentation and help
- Native MCP Server Support
  - Create Lua-based MCP servers directly in Neovim
  - Automatically create lua native MCP servers using LLMs
  - Write once, use everywhere design
  - Clean chained API for tools and resources
  - Full URI-based resource system with templates
  - Centralized lifecycle management
- Built-in MCP Servers
  - Neovim Server: Pre-configured with essential development tools
  - File operations (read, write, search, replace)
  - Command execution and terminal integration
  - LSP integration with diagnostics
  - Buffer and environment access
- Performance and Reliability
  - Parallel startup for improved performance
  - Automatic server lifecycle management
  - Smart shutdown handling with configurable delay
- Developer-friendly
  - Both sync and async operations supported
  - Clean client registration/cleanup
  - Comprehensive API for tool and resource access

==============================================================================
REQUIREMENTS                                               *mcphub-requirements*

- Neovim >= 0.8.0
- Node.js >= 18.0.0
- plenary.nvim (for HTTP requests)
- mcp-hub  (automatically installed via build command)

==============================================================================
INSTALLATION                                               *mcphub-installation*

Using lazy.nvim: >lua
    {
        "ravitemer/mcphub.nvim",
        dependencies = {
            "nvim-lua/plenary.nvim",  -- Required for Job and HTTP requests
        },
        -- comment the following line to ensure hub will be ready at the earliest
        cmd = "MCPHub",  -- lazy load by default
        build = "npm install -g mcp-hub@latest",
        -- uncomment this if you don't want mcp-hub to be available globally or can't use -g
        -- build = "bundled_build.lua",  -- Use this and set use_bundled_binary = true in opts
        config = function()
            require("mcphub").setup()
        end
    }
<
Advanced Configuration: >lua
    require("mcphub").setup({
        port = 37373,  -- Default port for MCP Hub
        config = vim.fn.expand("~/.config/mcphub/servers.json"),  -- Path to config file
        native_servers = {}, -- add your native servers here

        -- Extensions configuration
        extensions = {
            avante = {
                auto_approve_mcp_tool_calls = false, -- Auto approves mcp tool calls
            },
            codecompanion = {
                show_result_in_chat = true, -- Show the mcp tool result in the chat buffer
                make_vars = true, -- make chat #variables from MCP server resources
            },
        },

        -- Default window settings
        ui = {
          window = {
            width = 0.8, -- 0-1 (ratio); "50%" (percentage); 50 (raw number)
            height = 0.8,
            relative = "editor",
            zindex = 50,
            border = "rounded", -- "none", "single", "double", "rounded", "solid", "shadow"
          },
        },

        -- Event callbacks
        on_ready = function(hub)
          -- Called when hub is ready
        end,
        on_error = function(err)
          -- Called on errors
        end,

        --set this to true when using build = "bundled_build.lua"
        use_bundled_binary = false,  -- Uses bundled mcp-hub instead of global installation

        -- Logging configuration
        log = {
          level = vim.log.levels.WARN,
          to_file = false,
          file_path = nil,
          prefix = "MCPHub"
        }
    })
<
==============================================================================
USAGE                                                      *mcphub-usage*

Commands:                                                  *mcphub-commands*
:MCPHub                             Open the MCPHub UI window

API Usage:                                                 *mcphub-api*
>lua
    -- Get hub instance after setup
    local mcphub = require("mcphub")

    -- Option 1: Use on_ready callback
    mcphub.setup({
        port = 3000,
        config = vim.fn.expand("~/mcpservers.json"),
        on_ready = function(hub)
            -- Hub is ready to use here
        end
    })

    -- Option 2: Get hub instance directly
    local hub = mcphub.get_hub_instance()
<

Core Functions:                                            *mcphub-functions*
>lua
    -- Call a tool (sync)
    local response, err = hub:call_tool("server-name", "tool-name", {
        param1 = "value1"
    }, {
        return_text = true -- Parse response to LLM-suitable text
    })

    -- Call a tool (async)
    hub:call_tool("server-name", "tool-name", {
        param1 = "value1"
    }, {
        return_text = true,
        callback = function(response, err)
            -- Use response
        end
    })

    -- Access resource (sync)
    local response, err = hub:access_resource("server-name", "resource://uri", {
        return_text = true
    })

    -- Get prompt helpers for system prompts
    local prompts = hub:get_prompts({
        use_mcp_tool_example = "...",
        access_mcp_resource_example = "..."
    })
<

Native MCP Servers:                                        *mcphub-native-servers*

Create Lua-based MCP servers directly in Neovim:
>lua
    -- Option 1: Add servers in setup config
    require("mcphub").setup({
        native_servers = { 
            weather = {
                name = "weather",
                capabilities = {
                    tools = {
                        {
                            name = "get_weather",
                            description = "Get current weather information for a city",
                            inputSchema = {
                                type = "object",
                                properties = {
                                    city = {
                                        type = "string",
                                        description = "City name to get weather for",
                                    }
                                },
                            },
                            handler = function(req, res)
                                res:text("Weather in " .. req.params.city .. ": ☀️ Sunny, 22°C"):send()
                            end
                        }
                    },
                    resources = {
                        -- Resource definitions
                    },
                    resourceTemplates = {
                        -- Resource template definitions
                    }
                }
            }
        }
    })

    -- Option 2: Build servers incrementally with the API
    local mcphub = require("mcphub")
    
    -- Add a tool (creates server if not exists)
    mcphub.add_tool("weather", {
        name = "get_weather",
        description = "Get current weather for a city",
        inputSchema = {
            type = "object",
            properties = {
                city = {
                    type = "string",
                    description = "City name",
                    examples = ["London", "New York"],
                },
            },
        },
        handler = function(req, res)
            -- Handler implementation
            res:text("Weather data"):send()
        end,
    })

    -- Add a static resource
    mcphub.add_resource("weather", {
        name = "london_weather",
        uri = "weather://current/london",
        description = "Current London weather",
        handler = function(req, res)
            res:text("London: ☀️ 22°C"):send()
        end,
    })

    -- Add a resource template
    mcphub.add_resource_template("weather", {
        name = "city_weather",
        uriTemplate = "weather://current/{city}",
        description = "Get weather for any city",
        handler = function(req, res)
            -- Handler implementation
            res:text("Weather data for " .. req.params.city):send()
        end,
    })
<
==============================================================================
EXTENSIONS                                                 *mcphub-extensions*

MCPHub.nvim provides extensions that integrate with popular Neovim chat plugins.
These extensions allow you to use MCP tools and resources directly within your
chat interfaces.

Avante.nvim Integration:                                   *mcphub-avante*
>lua
    -- In mcphub setup
    extensions = {
        avante = {
            auto_approve_mcp_tool_calls = true, -- Auto approves mcp tool calls
        }
    }

    -- In avante setup
    require("avante").setup({
        -- The system_prompt type supports both a string and a function
        system_prompt = function()
            local hub = require("mcphub").get_hub_instance()
            return hub:get_active_servers_prompt()
        end,
        -- The custom_tools type supports both a list and a function
        custom_tools = function()
            return {
                require("mcphub.extensions.avante").mcp_tool(),
            }
        end,
    })
<

CodeCompanion Integration:                                 *mcphub-codecompanion*
Note: Breaking changes with codecompanion v13 in tool configuration.
>lua
    -- In mcphub setup
    extensions = {
        codecompanion = {
            show_result_in_chat = true, -- Show the mcp tool result in the chat buffer
            make_vars = true, -- make chat #variables from MCP server resources
        }
    }

    -- In codecompanion setup
    require("codecompanion").setup({
        strategies = {
            chat = {
                tools = {
                    ["mcp"] = {
                        callback = function() 
                            return require("mcphub.extensions.codecompanion") 
                        end,
                        description = "Call tools and resources from the MCP Servers",
                        opts = {
                            requires_approval = true,
                        }
                    }
                }
            }
        }
    })
<

Lualine Integration:                                       *mcphub-lualine*
>lua
    require('lualine').setup {
        sections = {
            lualine_x = {
                {require('mcphub.extensions.lualine')},
            },
        },
    }
<
==============================================================================
TROUBLESHOOTING                                           *mcphub-troubleshooting*

1. Environment Requirements~
   Most MCP servers require these to be installed:
>sh
   node --version    # Should be >= 18.0.0
   python --version  # Should be installed
   uvx --version    # Should be installed

   # Most server commands use these - verify they work:
   npx --version
   uvx --version
<

2. LLM Model Issues~
   If the LLM isn't making correct tool calls:

   - Schema Support:
     - Models with function calling support (like claude-3.5) work best
     - Only top-tier models handle XML-based tool formats correctly
     - Consider upgrading to a better model if seeing incorrect tool usage

   - Common Tool Call Issues:
     - Missing `action` field
     - Incorrect `server_name`
     - Missing `tool_name` or `uri`
     - Malformed arguments

   - Recommended Models:
     - GPT-4o
     - Claude 3.5 Sonnet
     - Claude 3.7
     - Gemini 2.0 Flash
     - Gemini 2.0 Pro
     - Mistral Large

3. Port Issues~
   If you get `EADDRINUSE` error:
>sh
   lsof -i :[port]  # Find process ID
   kill [pid]       # Kill the process
<

4. Configuration File~
   - Ensure config path is absolute
   - Verify file contains valid JSON with `mcpServers` key
   - Check server-specific configuration requirements
   - Validate server command and args are correct for your system

5. MCP Server Issues~
   Ways to validate server configurations:
   - MCP Inspector: GUI tool for verifying server operation
     https://github.com/modelcontextprotocol/inspector
   - mcp-cli: Command-line tool for testing with config files
     https://github.com/wong2/mcp-cli
   - Check server logs in MCPHub UI (Logs view)
   - Test tools and resources individually to isolate issues

Need Help?~
- First try testing it with minimal.lua: 
  https://gist.github.com/ravitemer/c85d69542bdfd1a45c6a9849301e4388
- Create a Discussion: https://github.com/ravitemer/mcphub.nvim/discussions
- Open an Issue: https://github.com/ravitemer/mcphub.nvim/issues

==============================================================================
ARCHITECTURE                                               *mcphub-architecture*

MCPHub.nvim uses an Express server to manage MCP servers and handle client
requests:

Setup Process:~
1. When setup() is called:
   - Checks for mcp-hub command installation
   - Verifies version compatibility
   - Starts mcp-hub with provided port and config file
   - Creates Express server at localhost:[port]

2. After successful setup:
   - Calls on_ready callback with hub instance
   - Hub instance provides REST API interface
   - UI updates in real-time via :MCPHub command

3. Express Server Features:
   - Manages MCP server configurations
   - Handles tool execution requests
   - Provides resource access
   - Multi-client support
   - Automatic cleanup

4. When Neovim instances close:
   - Unregister as clients
   - Last client triggers shutdown timer
   - Timer cancels if new client connects

Benefits:~
- Consistent server management
- Real-time status monitoring
- Efficient resource usage
- Clean process handling
- Multiple client support

For diagrams illustrating the architecture, visit:
https://github.com/ravitemer/mcphub.nvim#architecture-flows

==============================================================================
 vim:tw=78:ts=8:ft=help:norl:
